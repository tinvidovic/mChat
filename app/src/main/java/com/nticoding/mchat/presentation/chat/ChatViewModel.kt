package com.nticoding.mchat.presentation.chat

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.nticoding.mchat.domain.model.Message
import com.nticoding.mchat.domain.use_case.GetConversationMessagesUseCase
import com.nticoding.mchat.domain.use_case.InsertMessageUseCase
import dagger.assisted.Assisted
import dagger.assisted.AssistedFactory
import dagger.assisted.AssistedInject
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

@HiltViewModel(assistedFactory = ChatViewModel.ChatViewModelFactory::class)
class ChatViewModel @AssistedInject constructor(
    @Assisted val conversationId: Int,
    private val getConversationMessagesUseCase: GetConversationMessagesUseCase,
    private val insertMessageUseCase: InsertMessageUseCase,
) : ViewModel() {

    @AssistedFactory
    interface ChatViewModelFactory {
        fun create(conversationId: Int): ChatViewModel
    }

    var state: ChatState by mutableStateOf(ChatState())

    // Hardcoded myId for simplicity, would be fetched in a real app
    val myId = 0

    fun onEvent(event: ChatEvent) {

        when (event) {
            is ChatEvent.OnInputChange -> {
                state = state.copy(input = event.input)
            }

            is ChatEvent.OnSendClick -> {
                if (state.input.isNotEmpty()) {
                    insertMessage(
                        message = Message(
                            authorId = myId,
                            content = state.input,
                            timestamp = System.currentTimeMillis()
                        ),
                        conversationId
                    )
                }

                state = state.copy(
                    input = ""
                )
            }
        }
    }
    init {
        // Only load messages if not already bundled
        if (state.messages.isEmpty()) {
            loadMessages()
        }
    }

    private fun loadMessages() {
        viewModelScope.launch {
            getConversationMessagesUseCase.invoke(0).collectLatest {
                state = state.copy(
                    messages = it
                )
            }
        }
    }

    private fun insertMessage(
        message: Message,
        conversationId: Int,
    ) {

        viewModelScope.launch {
            insertMessageUseCase.invoke(
                message = message,
                conversationId = conversationId
            )
        }
    }

    /**
     * Returns a random message, generated by the other user to be used as a dummy response
     */
    fun getRandomResponse() {
        val responses = listOf(
            "Wow, that is so cool! Can you tell me some more, I am really interested?",
            "Sounds, good!",
            "See you!",
            "Bye",
            "What???",
            "Really?",
            "Seriously?",
            "No way!!!"
        )

        insertMessage(
            Message(
                authorId = 1, // Should be different from myId
                content = responses.random(),
                timestamp = System.currentTimeMillis()
            ),
            conversationId
        )

    }
}